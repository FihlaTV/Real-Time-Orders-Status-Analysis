{
    "paragraphs": [{
        "text": "%angular\n<style>\n    svg {\n        width: 960px;\n        height: 200px;\n        position: center;\n    }\n\n    .toolTip {\n        font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        position: absolute;\n        display: none;\n        width: auto;\n        height: auto;\n        background: none repeat scroll 0 0 white;\n        border: 0 none;\n        border-radius: 8px 8px 8px 8px;\n        box-shadow: -3px 3px 15px #888888;\n        color: black;\n        font: 12px sans-serif;\n        padding: 5px;\n        text-align: center;\n    }\n    \n    text{\n        font:10px sans-serif;\n        color: white;\n    }\n    text.value{\n        font-size: 60%;\n        fill: white;\n    }\n    .axisHorizontal path{\n        fill: none;\n    }\n\n    .axisHorizontal .tick line {\n        stroke-width: 1;\n        stroke: rgba(0, 0, 0, 0.2);\n    }\n\n    .bar {\n        fill: steelblue;\n        fill-opacity: .9;\n    }\n</style>\n    <p>Dashboard</p>\n    <svg id=\"chart\"></svg>\n<script type=\"text/javascript\">\n    function useD3() {\n    \n        data = angular.element($('#chart').parent('.ng-scope')).scope().compiledScope.Check;\n        var axisMargin = 20,\n            margin = 40,\n            valueMargin = 4,\n            width = parseInt(d3.select('svg').style('width'), 10),\n            height = parseInt(d3.select('svg').style('height'), 10),\n            barHeight = (500-axisMargin-margin*2)* 0.4/6,\n            barPadding = (300-axisMargin-margin*2)*0.6/20,\n            data, bar, svg, scale, xAxis, labelWidth = 0;\n            \n        \n    \n    var el = angular.element($('#chart').parent('.ng-scope'));\n    angular.element(el).ready(function() {\n        console.log(el.scope().compiledScope);\n        window.locationWatcher = el.scope().compiledScope.$watchCollection('orderStatus', function(newValue, oldValue){\n            \n            max = d3.max(newValue, function(d) { return d.count; });\n            \n            d3.selectAll(\"svg > *\").remove();\n            var bar=d3.select(\"#chart\").selectAll(\"g\").data(newValue);\n            bar = bar.data(newValue).enter().append(\"g\");\n            \n            bar.attr(\"class\", \"bar\")\n                .attr(\"cx\",0)\n                .attr(\"transform\", function(d, i) {\n                    return \"translate(\" + margin + \",\" + (i * (barHeight + barPadding) + barPadding) + \")\";\n                });\n            \n            bar.append(\"text\")\n                .attr(\"class\", \"label\")\n                .attr(\"y\", barHeight / 2)\n                .attr(\"dy\", \".35em\") //vertical align middle\n                .text(function(d){\n                    return d.status;\n                }).each(function() {\n                    labelWidth = Math.ceil(Math.max(labelWidth, this.getBBox().width));\n                });\n            var scale = d3.scaleLinear()\n                        .domain([0, max])\n                        .range([0, width - margin*2 - labelWidth]);\n\n            xAxis = d3.svg.axis()\n                        .scale(scale)\n                        .tickSize(-height + 2*margin + axisMargin)\n                        .orient(\"bottom\");\n            \n            bar.exit().remove();\n            \n            bar.append(\"rect\")\n                .attr(\"transform\", \"translate(\"+labelWidth+\", 0)\")\n                .attr(\"height\", barHeight)\n                .attr(\"width\", function(d){\n                    return scale(d.count);\n                });\n            \n            bar.append(\"text\")\n                .attr(\"class\", \"value\")\n                .attr(\"y\", barHeight / 2)\n                .attr(\"dx\", -valueMargin + labelWidth) //margin right\n                .attr(\"dy\", \".35em\") //vertical align middle\n                .attr(\"text-anchor\", \"end\")\n                .text(function(d){\n                    console.log(d.count , scale(d.count))\n                    return d.count;\n                })\n                .attr(\"x\", function(d){\n                    var width = this.getBBox().width;\n                    return Math.max(width + valueMargin, scale(d.count));\n                });\n        });\n        })\n}\n\nif (window.locationWatcher) {\n    // clear existing watcher otherwise we'll have duplicates\n    window.locationWatcher();\n}\n\n// ensure we only load the script once, seems to cause issues otherwise\nif (window.d) {\n    useD3();\n} else {\n    console.log('Loading D3 library');\n    var sc = document.createElement('script');\n    sc.type = 'text/javascript';\n    sc.src = 'https://cdnjs.cloudflare.com/ajax/libs/d3/4.10.2/d3.min.js';\n    sc.onload = useD3;\n    sc.onerror = function(err) { alert(err); }\n    document.getElementsByTagName('head')[0].appendChild(sc);\n}\n</script>\n",
        "user": "anonymous",
        "dateUpdated": "2017-09-18T00:25:06-0700",
        "config": {
            "colWidth": 12,
            "enabled": true,
            "results": {},
            "editorSetting": {
                "language": "text",
                "editOnDblClick": true
            },
            "editorMode": "ace/mode/undefined",
            "editorHide": true,
            "tableHide": false
        },
        "settings": {
            "params": {},
            "forms": {}
        },
        "results": {
            "code": "SUCCESS",
            "msg": [{
                "type": "ANGULAR",
                "data": "<style>\n    svg {\n        width: 960px;\n        height: 200px;\n        position: center;\n    }\n\n    .toolTip {\n        font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        position: absolute;\n        display: none;\n        width: auto;\n        height: auto;\n        background: none repeat scroll 0 0 white;\n        border: 0 none;\n        border-radius: 8px 8px 8px 8px;\n        box-shadow: -3px 3px 15px #888888;\n        color: black;\n        font: 12px sans-serif;\n        padding: 5px;\n        text-align: center;\n    }\n    \n    text{\n        font:10px sans-serif;\n        color: white;\n    }\n    text.value{\n        font-size: 60%;\n        fill: white;\n    }\n    .axisHorizontal path{\n        fill: none;\n    }\n\n    .axisHorizontal .tick line {\n        stroke-width: 1;\n        stroke: rgba(0, 0, 0, 0.2);\n    }\n\n    .bar {\n        fill: steelblue;\n        fill-opacity: .9;\n    }\n</style>\n    <p>Dashboard</p>\n    <svg id=\"chart\"></svg>\n<script type=\"text/javascript\">\n    function useD3() {\n    \n        data = angular.element($('#chart').parent('.ng-scope')).scope().compiledScope.Check;\n        var axisMargin = 20,\n            margin = 40,\n            valueMargin = 4,\n            width = parseInt(d3.select('svg').style('width'), 10),\n            height = parseInt(d3.select('svg').style('height'), 10),\n            barHeight = (500-axisMargin-margin*2)* 0.4/6,\n            barPadding = (300-axisMargin-margin*2)*0.6/20,\n            data, bar, svg, scale, xAxis, labelWidth = 0;\n            \n        \n    \n    var el = angular.element($('#chart').parent('.ng-scope'));\n    angular.element(el).ready(function() {\n        console.log(el.scope().compiledScope);\n        window.locationWatcher = el.scope().compiledScope.$watchCollection('orderStatus', function(newValue, oldValue){\n            \n            max = d3.max(newValue, function(d) { return d.count; });\n            \n            d3.selectAll(\"svg > *\").remove();\n            var bar=d3.select(\"#chart\").selectAll(\"g\").data(newValue);\n            bar = bar.data(newValue).enter().append(\"g\");\n            \n            bar.attr(\"class\", \"bar\")\n                .attr(\"cx\",0)\n                .attr(\"transform\", function(d, i) {\n                    return \"translate(\" + margin + \",\" + (i * (barHeight + barPadding) + barPadding) + \")\";\n                });\n            \n            bar.append(\"text\")\n                .attr(\"class\", \"label\")\n                .attr(\"y\", barHeight / 2)\n                .attr(\"dy\", \".35em\") //vertical align middle\n                .text(function(d){\n                    return d.status;\n                }).each(function() {\n                    labelWidth = Math.ceil(Math.max(labelWidth, this.getBBox().width));\n                });\n            var scale = d3.scaleLinear()\n                        .domain([0, max])\n                        .range([0, width - margin*2 - labelWidth]);\n\n            xAxis = d3.svg.axis()\n                        .scale(scale)\n                        .tickSize(-height + 2*margin + axisMargin)\n                        .orient(\"bottom\");\n            \n            bar.exit().remove();\n            \n            bar.append(\"rect\")\n                .attr(\"transform\", \"translate(\"+labelWidth+\", 0)\")\n                .attr(\"height\", barHeight)\n                .attr(\"width\", function(d){\n                    return scale(d.count);\n                });\n            \n            bar.append(\"text\")\n                .attr(\"class\", \"value\")\n                .attr(\"y\", barHeight / 2)\n                .attr(\"dx\", -valueMargin + labelWidth) //margin right\n                .attr(\"dy\", \".35em\") //vertical align middle\n                .attr(\"text-anchor\", \"end\")\n                .text(function(d){\n                    console.log(d.count , scale(d.count))\n                    return d.count;\n                })\n                .attr(\"x\", function(d){\n                    var width = this.getBBox().width;\n                    return Math.max(width + valueMargin, scale(d.count));\n                });\n        });\n        })\n}\n\nif (window.locationWatcher) {\n    // clear existing watcher otherwise we'll have duplicates\n    window.locationWatcher();\n}\n\n// ensure we only load the script once, seems to cause issues otherwise\nif (window.d) {\n    useD3();\n} else {\n    console.log('Loading D3 library');\n    var sc = document.createElement('script');\n    sc.type = 'text/javascript';\n    sc.src = 'https://cdnjs.cloudflare.com/ajax/libs/d3/4.10.2/d3.min.js';\n    sc.onload = useD3;\n    sc.onerror = function(err) { alert(err); }\n    document.getElementsByTagName('head')[0].appendChild(sc);\n}\n</script>"
            }]
        },
        "apps": [],
        "jobName": "paragraph_1505686610141_-1054782199",
        "id": "20170917-151650_1842799988",
        "dateCreated": "2017-09-17T15:16:50-0700",
        "dateStarted": "2017-09-18T00:25:06-0700",
        "dateFinished": "2017-09-18T00:25:06-0700",
        "status": "FINISHED",
        "progressUpdateIntervalMs": 500,
        "focus": true,
        "$$hashKey": "object:225"
    }, {
        "text": "%spark\r\nimport org.apache.kafka.clients.consumer.ConsumerRecord\r\nimport org.apache.kafka.common.serialization.StringDeserializer\r\nimport org.apache.spark.streaming.kafka010.KafkaUtils\r\nimport org.apache.spark.streaming.kafka010.LocationStrategies.PreferConsistent\r\nimport org.apache.spark.streaming.kafka010.ConsumerStrategies.Subscribe\r\nimport org.apache.spark.streaming._\r\nimport org.apache.spark.rdd.RDD\r\nimport org.apache.spark.sql.SparkSession\r\nimport org.apache.zeppelin.display.angular.notebookscope._\r\nimport AngularElem._\r\n\r\nsc.setLogLevel(\"ERROR\")\r\ncase class Orders(status: String, count: Int)\r\n\r\ncase class OrdersGroup(timestamp: java.util.Date, orders: Array[Orders])\r\n\r\nval ssc = new StreamingContext(sc, Seconds(5))\r\n\r\nval kafkaParams = Map(\r\n    \"bootstrap.servers\" -> \"192.168.67.129:9092,192.168.67.133:9092,192.168.67.1:9092\",\r\n    \"key.deserializer\" -> classOf[StringDeserializer],\r\n  \"value.deserializer\" -> classOf[StringDeserializer],\r\n  \"group.id\" -> \"use_a_separate_group_id_for_each_stream\",\r\n  \"auto.offset.reset\" -> \"latest\",\r\n  \"enable.auto.commit\" -> (false: java.lang.Boolean)\r\n)\r\n\r\nval topics = Array(\"orders2\")\r\nval messages = KafkaUtils.createDirectStream[String, String](\r\n    ssc,\r\n    PreferConsistent,\r\n    Subscribe[String, String](topics, kafkaParams)\r\n)\r\n\r\nval lines = messages.map(_.value)\r\nval words = lines.map(_.split(\",\")(2))\r\nwords.foreachRDD{ \r\n    rdd => {\r\n      var df = rdd.map(x => (x, 1)).reduceByKey(_ + _).map{case (status: String, count: Int) => Orders(status, count)}\r\n      var ordrs = df.collect\r\n      println(ordrs.mkString(\",\"))\r\n      z.angularBind(\"orderStatus\", ordrs)\r\n    }\r\n}\r\n// val wordCounts = words.map(x => (x, 1)).reduceByKey(_ + _)\r\n// wordCounts.print()\r\n\r\nssc.start()\r\nssc.awaitTermination()",
        "user": "anonymous",
        "dateUpdated": "2017-09-18T00:24:56-0700",
        "config": {
            "colWidth": 12,
            "enabled": true,
            "results": {},
            "editorSetting": {
                "language": "scala",
                "editOnDblClick": true
            },
            "editorMode": "ace/mode/scala",
            "editorHide": true,
            "tableHide": false
        },
        "settings": {
            "params": {},
            "forms": {}
        },
        "results": {
            "msg": [{
                "data": "",
                "type": "TEXT"
            }]
        },
        "apps": [],
        "jobName": "paragraph_1505704156774_-26421639",
        "id": "20170917-200916_1489500072",
        "dateCreated": "2017-09-17T20:09:16-0700",
        "dateStarted": "2017-09-18T00:24:01-0700",
        "dateFinished": "2017-09-17T23:57:29-0700",
        "status": "RUNNING",
        "errorMessage": "",
        "progressUpdateIntervalMs": 500,
        "$$hashKey": "object:226"
    }, {
        "text": "",
        "user": "anonymous",
        "dateUpdated": "2017-09-17T23:44:40-0700",
        "config": {
            "colWidth": 12,
            "enabled": true,
            "results": {},
            "editorSetting": {
                "language": "scala"
            },
            "editorMode": "ace/mode/scala"
        },
        "settings": {
            "params": {},
            "forms": {}
        },
        "apps": [],
        "jobName": "paragraph_1505704237035_1062741200",
        "id": "20170917-201037_1342919899",
        "dateCreated": "2017-09-17T20:10:37-0700",
        "status": "FINISHED",
        "progressUpdateIntervalMs": 500,
        "$$hashKey": "object:227"
    }],
    "name": "orders",
    "id": "2CVAR5TQN",
    "angularObjects": {
        "2CTECS588:shared_process": [],
        "2CTP24NJE:shared_process": [],
        "2CS98TGWE:shared_process": [],
        "2CU52CCRA:shared_process": [],
        "2CVEXHC87:shared_process": [],
        "2CTZ7ASTX:shared_process": [],
        "2CU7XB28K:shared_process": [],
        "2CU24UW3C:shared_process": [],
        "2CUB6RWFN:shared_process": [],
        "2CV8666HW:shared_process": [],
        "2CUCEUYZK:shared_process": [],
        "2CTC65SZB:shared_process": [],
        "2CTERA72U:shared_process": [],
        "2CSVMEP6N:shared_process": [],
        "2CTK124VA:shared_process": [],
        "2CTA8AER2:shared_process": [],
        "2CTXPGBZS:shared_process": [{
            "name": "val",
            "object": "newValue",
            "noteId": "2CVAR5TQN"
        }, {
            "name": "data",
            "object": [1, 2, 3, 4, 5],
            "noteId": "2CVAR5TQN"
        }, {
            "name": "Check",
            "object": [{
                "status": "Approved",
                "count": 40
            }, {
                "status": "Shipped",
                "count": 70
            }, {
                "status": "In Transit",
                "count": 30
            }],
            "noteId": "2CVAR5TQN"
        }],
        "2CTMKYU3S:shared_process": [],
        "2CUUEH485:shared_process": []
    },
    "config": {
        "looknfeel": "default",
        "personalizedMode": "false"
    },
    "info": {}
}